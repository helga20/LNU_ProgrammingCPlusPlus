#include "sortProcedures.h"

// ¬ѕќ–яƒ ”¬јЌЌя ћј—»¬” а ћ≈“ќƒќћ Ѕ”Ћ№ЅјЎ » (ќЅћ≤Ќ≤¬)
void bubbleSort(int * a, unsigned n)
{
	// пор≥вн€Їмо кожну пару сус≥д≥в ≥ обм≥н€Їмо м≥сц€ми
	// невпор€дкован≥ пари. перегл€д повторимо n-1 раз
	for (unsigned j = n - 1; j > 0; --j)
		for (unsigned i = 0; i < j; ++i)
			if (a[i] > a[i + 1]) // Ђневпор€дкованихї сус≥д≥в
			{					 // потр≥бно пом≥н€ти м≥сц€ми
				int toSwap = a[i];
				a[i] = a[i + 1];
				a[i + 1] = toSwap;
			}
}

// ¬ѕќ–яƒ ”¬јЌЌя ћј—»¬” а ѕќ –јў≈Ќ»ћ ћ≈“ќƒќћ ќЅћ≤Ќ≤¬
void replaceSort(int * a, unsigned n)
{
	// пор≥вн€Їмо кожну пару сус≥д≥в ≥ обм≥н€Їмо м≥сц€ми
	// невпор€дкован≥ пари. перегл€д повтор€тимемо, поки потр≥бно
	unsigned k;         // м≥сце останнього виконаного обм≥ну
	unsigned j = n - 1; // спочатку весь масив - невпор€дкований
	while (j > 0)
	{
		k = 0;    // припустили, що вс≥ пари Ї у правильному пор€дку
		for (unsigned i = 0; i < j; ++i)
			if (a[i] > a[i + 1]) // знайшли Ђневпор€дкованихї сус≥д≥в
			{					 // потр≥бно пом≥н€ти њх м≥сц€ми
				int toSwap = a[i];
				a[i] = a[i + 1];
				a[i + 1] = toSwap;
				k = i;           // ≥ запамТ€тати м≥сце, де це сталос€
			}
		j = k; // зм≥нили межу невпор€дкованоњ частини
	}
}